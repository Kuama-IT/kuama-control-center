import {
  Api,
  TimeEntryApiResponse,
} from "@/modules/easyredmine/generated/easyredmine-rest-client";
import { endOfMonth, format, startOfMonth } from "date-fns";

export class EasyRedmineApiClient {
  private readonly api: Api<{ headers: { "X-Redmine-API-Key": string } }>;
  constructor(
    public readonly endpoint: string,
    public readonly token: string,
  ) {
    this.api = new Api({
      baseUrl: endpoint,
      securityWorker: () => ({
        headers: {
          "X-Redmine-API-Key": token,
        },
      }),
    });
  }

  async getSpentTimes({ from, to }: { from: Date; to: Date }) {
    // autogenerated Api code makes a wrong call (probably the swagger is wrong)

    const formattedFrom = format(from, "yyyy-LL-dd");
    const formattedTo = format(to, "yyyy-LL-dd");
    const req = await fetch(
      `${this.endpoint}/time_entries.json?set_filter=true&f[spent_on]=${formattedFrom}|${formattedTo}&f[user_id]=${encodeURI("=me")}`,
      {
        headers: {
          "X-Redmine-API-Key": this.token,
        },
      },
    );

    // todo find a better way than as
    const json = (await req.json()) as {
      total_count?: number;
      offset?: number;
      limit?: number;
      time_entries?: TimeEntryApiResponse[];
    };
    const timeEntries = json.time_entries ?? [];
    const user = timeEntries[0]?.user; // we expect this to be the same for all spent times.

    const groupedBySpentOn = timeEntries.reduce((acc, timeEntry) => {
      const spentOn = timeEntry.spent_on;
      if (!spentOn) {
        return acc;
      }
      if (!acc.has(spentOn)) {
        acc.set(spentOn, []);
      }

      acc.get(spentOn)?.push(timeEntry);
      return acc;
    }, new Map<string, TimeEntryApiResponse[]>());

    let monthTotalHours = 0;
    const timesSpent: {
      id: number;
      project?: {
        id?: number;
        name?: string;
        code?: string;
      };
      task?: {
        id: number;
        subject: string;
      };
      date: string;
      userFullName: string;
      activity: string;
      spentTime: string;
      agency: "Kuama";
    }[] = [];
    for (const [date, timeEntries] of groupedBySpentOn.entries()) {
      const timeEntriesTotal = timeEntries.reduce(
        (acc, timeEntry) => acc + parseFloat(timeEntry.hours ?? "0"),
        0,
      );
      monthTotalHours += timeEntriesTotal;
      for (const timeEntry of timeEntries) {
        if (timeEntry.issue && timeEntry.issue.id) {
          const issueResponse = await this.api.issues.getIssues(
            timeEntry.issue.id,
            "json",
          );

          const project = timeEntry.project;
          const projectCode = project?.name?.split("-")[0];
          const projectName = project?.name?.split("-")[1];
          timesSpent.push({
            id: timeEntry.id!,
            project: {
              id: project?.id,
              code: projectCode,
              name: projectName,
            },
            task: {
              subject: issueResponse.data?.issue?.subject ?? "",
              id: timeEntry.issue.id,
            },
            date: date,
            userFullName: user?.name ?? "",
            activity: timeEntry.activity?.name ?? "",
            spentTime: timeEntry.hours ?? "",
            agency: "Kuama",
          });
        } else {
          console.log(timeEntry.project?.name, " - ", timeEntry.hours);
        }
      }
    }

    return { timesSpent, monthTotalHours };
  }
}
